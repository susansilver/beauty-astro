---
import { getCollection } from 'astro:content';
import { Pagination} from 'accessible-astro-components';
import Card from '../../../components/blog/Card.astro';
import Header from '../../../components/base/Header.astro';
import BaseHead from '../../../components/base/BaseHead.astro';
import Footer from '../../../components/base/Footer.astro';

export async function getStaticPaths({ paginate }) {
  const allPosts = await getCollection('blog');
  const allTags = new Set()
  allPosts.map(post => {
      post.data.tags && post.data.tags.map(tag => allTags.add(tag.toLowerCase()))
  })

  return Array.from(allTags).map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.data.tags.includes(tag))
    return paginate(filteredPosts, {
      params: { tag },
      pageSize: 6,
    });
  });
}

const { page } = Astro.props
const { tag } = Astro.params
---
<html lang="en">
	<head>
        <BaseHead title={tag.toLowerCase().replace('-', ' ')} description={`Tag archive for ${tag.replace('-', ' ')}`}  />
	</head>

	<body class="dark:bg-slate-800 dark:text-white-50">
		<Header />
		<main>
            <h1 class="text-3xl p-5">Tag: {tag.toLowerCase().replace('-', ' ')}</h1>

  <!--List the array of astronaut info-->
  <div class="md:grid lg:grid-cols-3 md:grid-cols-2 md:gap-4 md:mx-auto text-lg">
    {page.data.sort((a, b) => a.data.title.localeCompare(b.data.title))


      .map(blogPostEntry => (
        <div class="relative p-3">
          <Card
            url={`/${blogPostEntry.slug}`}
            img={blogPostEntry.data.heroImage}
            alt ={blogPostEntry.data.alt}
            title={blogPostEntry.data.title}
            footer=""
          >
            <p class="m-5">{blogPostEntry.data.description}</p>
          </Card>
          <button><a href={`/${blogPostEntry.slug}`} class="absolute hidden md:flex bottom-5 right-5 btn">Read More</a></button>
        </div>
      ))}
  </div>
  

<div class="flex justify-center m-5">

  <Pagination
  firstPage={page.url.prev ? '/blog' : null}
  previousPage={page.url.prev ? page.url.prev : null}
  nextPage={page.url.next ? page.url.next : null}
  lastPage={page.url.next ? `/blog/${Math.round(page.total / page.size)}` : null}
  currentPage={page.currentPage}
  totalPages={Math.round(page.total / page.size)}
/>
</div>

</main>
		<Footer />
	</body>
</html>

